[#ftl]
[#-- Standard inputs --]
[#assign blueprintObject = blueprint?eval]
[#assign credentialsObject = (credentials?eval).Credentials]
[#assign appSettingsObject = appsettings?eval]
[#assign stackOutputsObject = stackOutputs?eval]

[#-- Reference data --]
[#assign regions = blueprintObject.Regions]
[#assign environments = blueprintObject.Environments]
[#assign categories = blueprintObject.Categories]
[#assign routeTables = blueprintObject.RouteTables]
[#assign networkACLs = blueprintObject.NetworkACLs]
[#assign storage = blueprintObject.Storage]
[#assign processors = blueprintObject.Processors]
[#assign ports = blueprintObject.Ports]
[#assign portMappings = blueprintObject.PortMappings]
[#assign powersOf2 = blueprintObject.PowersOf2]

[#-- Region --]
[#if region??]
    [#assign regionId = region]
    [#assign regionObject = regions[regionId]]
    [#assign regionName = regionObject.Name]
[/#if]

[#-- Tenant --]
[#if blueprintObject.Tenant??]
    [#assign tenantObject = blueprintObject.Tenant]
    [#assign tenantId = tenantObject.Id]
    [#assign tenantName = tenantObject.Name]
[/#if]

[#-- Account --]
[#if blueprintObject.Account??]
    [#assign accountObject = blueprintObject.Account]
    [#assign accountId = accountObject.Id]
    [#assign accountName = accountObject.Name]
    [#if accountRegion??]
        [#assign accountRegionId = accountRegion]
        [#assign accountRegionObject = regions[accountRegionId]]
        [#assign accountRegionName = accountRegionObject.Name]
    [/#if]
    [#assign credentialsBucket = getKey("s3","account", "credentials")!"unknown"]
    [#assign codeBucket = getKey("s3","account","code")!"unknown"]
    [#assign registryBucket = getKey("s3", "account", "registry")!"unknown"]
[/#if]

[#-- Product --]
[#if blueprintObject.Product??]
    [#assign productObject = blueprintObject.Product]
    [#assign productId = productObject.Id]
    [#assign productName = productObject.Name]
    [#if productRegion??]
        [#assign productRegionId = productRegion]
        [#assign productRegionObject = regions[productRegionId]]
        [#assign productRegionName = productRegionObject.Name]
    [/#if]
[/#if]

[#-- Segment --]
[#if blueprintObject.Segment??]
    [#assign segmentObject = blueprintObject.Segment]
    [#assign segmentId = segmentObject.Id]
    [#assign segmentName = segmentObject.Name]
    [#assign sshPerSegment = segmentObject.SSHPerSegment]
    [#assign internetAccess = segmentObject.InternetAccess]
    [#assign jumpServer = internetAccess && segmentObject.NAT.Enabled]
    [#assign jumpServerPerAZ = jumpServer && segmentObject.NAT.MultiAZ]
    [#assign operationsBucket = "unknown"]
    [#assign operationsBucketSegment = "segment"]
    [#assign operationsBucketType = "operations"]
    [#if getKey("s3", "segment", "operations")??]
        [#assign operationsBucket = getKey("s3", "segment", "operations")]        
    [/#if]
    [#if getKey("s3", "segment", "logs")??]
        [#assign operationsBucket = getKey("s3", "segment", "logs")]        
        [#assign operationsBucketType = "logs"]
    [/#if]
    [#if getKey("s3", "container", "logs")??]
        [#assign operationsBucket = getKey("s3", "container", "logs")]        
        [#assign operationsBucketSegment = "container"]
        [#assign operationsBucketType = "logs"]
    [/#if]
    [#assign dataBucket = "unknown"]
    [#assign dataBucketSegment = "segment"]
    [#assign dataBucketType = "data"]
    [#if getKey("s3", "segment", "data")??]
        [#assign dataBucket = getKey("s3", "segment", "data")]        
    [/#if]
    [#if getKey("s3", "segment", "backups")??]
        [#assign dataBucket = getKey("s3", "segment", "backups")]        
        [#assign dataBucketType = "backups"]
    [/#if]
    [#if getKey("s3", "container", "backups")??]
        [#assign dataBucket = getKey("s3", "container", "backups")]        
        [#assign dataBucketSegment = "container"]
        [#assign dataBucketType = "logs"]
    [/#if]
    [#assign segmentDomain = getKey("domain", "segment", "domain")!"unknown"]
    [#assign segmentDomainQualifier = getKey("domain", "segment", "qualifier")!"unknown"]
    [#assign certificateId = getKey("domain", "segment", "certificate")!"unknown"]
    [#assign vpc = getKey("vpc", "segment", "vpc")!"unknown"]
    [#assign securityGroupNAT = getKey("securityGroup", "mgmt", "nat")!"none"]
    [#if segmentObject.Environment??]
        [#assign environmentId = segmentObject.Environment]
        [#assign environmentObject = environments[environmentId]]
        [#assign environmentName = environmentObject.Name]
        [#assign categoryId = segmentObject.Category!environmentObject.Category]
        [#assign categoryObject = categories[categoryId]]
    [/#if]
[/#if]

[#-- Solution --]
[#if blueprintObject.Solution??]
    [#assign solutionObject = blueprintObject.Solution]
    [#assign solnMultiAZ = solutionObject.MultiAZ!(environmentObject.MultiAZ)!false]
[/#if]

[#-- Concatenate sequence of non-empty strings with a separator --]
[#function concatenate args separator]
    [#local content = []]
    [#list args as arg]
        [#if arg?has_content]
            [#local content += [arg]]
        [/#if]
    [/#list]
    [#return content?join(separator)]
[/#function]

[#-- Format an id - largely used for resource ids which have severe character constraints --]
[#function formatId args...]
    [#return concatenate(args, "X")]
[/#function]

[#-- Format a name - largely used for names that appear in the AWS console --]
[#function formatName args...]
    [#return concatenate(args, "-")]
[/#function]

[#-- Get stack output --]
[#function getKey args...]
    [#local key=args?join("X")]
    [#list stackOutputsObject as pair]
        [#if pair.OutputKey==key]
            [#return pair.OutputValue]
        [/#if]
    [/#list]
[/#function]

[#function getTier tierId]
    [#return blueprintObject.Tiers[tierId]]
[/#function]

[#-- Locate the object for a component within tier --]
[#function getComponent tierId componentId]
    [#local tier = getTier(tierId)]
    [#list tier.Components?values as component]
        [#if componentId == component.Id]
            [#return component]
        [/#if]
    [/#list]
[/#function]

[#-- Calculate the closest power of 2 --]
[#function getPowerOf2 value]
    [#local exponent = -1]
    [#list powersOf2 as powerOf2]
        [#if powerOf2 <= value]
            [#assign exponent = powerOf2?index]
        [#else]
            [#break]
        [/#if]
    [/#list]
    [#return exponent]
[/#function]

[#-- Required tiers --]
[#function isTier tierId]
    [#return (blueprintObject.Tiers[tierId])??]
[/#function]

[#assign tiers = []]
[#list segmentObject.Tiers.Order as tierId]
    [#if isTier(tierId)]
        [#assign tier = getTier(tierId)]
        [#if tier.Components??
            || ((tier.Required)?? && tier.Required)
            || (jumpServer && (tierId == "mgmt"))]
            [#assign tiers += [tier + 
                {"Index" : tierId?index}]]
        [/#if]
    [/#if]
[/#list]

[#-- Required zones --]
[#assign zones = []]
[#list segmentObject.Zones.Order as zoneId]
    [#if regions[region].Zones[zoneId]??]
        [#assign zone = regions[region].Zones[zoneId]]
        [#assign zones += [zone +  
            {"Index" : zoneId?index}]]
    [/#if]
[/#list]

[#-- Get processor settings --]
[#function getProcessor tier component type]
    [#local tc = tier.Id + "-" + component.Id]
    [#local defaultProfile = "default"]
    [#if (component[type].Processor)??]
        [#return component[type].Processor]
    [/#if]
    [#if (processors[solutionObject.CapacityProfile][tc])??]
        [#return processors[solutionObject.CapacityProfile][tc]]
    [/#if]
    [#if (processors[solutionObject.CapacityProfile][type])??]
        [#return processors[solutionObject.CapacityProfile][type]]
    [/#if]
    [#if (processors[defaultProfile][tc])??]
        [#return processors[defaultProfile][tc]]
    [/#if]
    [#if (processors[defaultProfile][type])??]
        [#return processors[defaultProfile][type]]
    [/#if]
[/#function]


[#-- Get storage settings --]
[#function getStorage tier component type]
    [#local tc = tier.Id + "-" + component.Id]
    [#local defaultProfile = "default"]
    [#if (component[type].Storage)??]
        [#return component[type].Storage]
    [/#if]
    [#if (storage[solutionObject.CapacityProfile][tc])??]
        [#return storage[solutionObject.CapacityProfile][tc]]
    [/#if]
    [#if (storage[solutionObject.CapacityProfile][type])??]
        [#return storage[solutionObject.CapacityProfile][type]]
    [/#if]
    [#if (storage[defaultProfile][tc])??]
        [#return storage[defaultProfile][tc]]
    [/#if]
    [#if (storage[defaultProfile][type])??]
        [#return storage[defaultProfile][type]]
    [/#if]
[/#function]

